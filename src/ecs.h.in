#pragma once
#include "utils.h"
#include "basic_components.h"
#include "player_ship.h"

struct ComponentBit
{
    enum Enum: i32 {
        Null = 0,
%%ENUM_COMPONENT%%
    };
    
    static const char* Names[];
};

#define MAX_ENTITIES 2048

struct EntityComponentSystem
{
    u64 entityCompBits[MAX_ENTITIES] = {};
    char entityName[MAX_ENTITIES][32];
    bool8 entityAlive[MAX_ENTITIES] = {0};
    bool8 entityDeleteFlag[MAX_ENTITIES] = {0};
%%ARRAY_COMPONENT%%

    i32 createEntity(const char* name = "Entity");
    void deleteEntity(const i32 eid);
    void update(f64 delta, f64 physLerpAlpha);
    void removeFlaggedForDeletion();

#define ADD_FUNC(COMP)\
    inline C##COMP& addComp##COMP(const i32 eid) {\
        assert(eid >= 0 && eid < MAX_ENTITIES);\
        entityCompBits[eid] |= ComponentBit::COMP;\
        return comp_##COMP.emplace(eid, {});\
    }

%%ADD_COMPONENT%%

#undef ADD_FUNC

#define HAS_FUNC(COMP)\
    inline bool hasComp##COMP(const i32 eid) {\
        assert(eid >= 0 && eid < MAX_ENTITIES);\
        return (entityCompBits[eid] & ComponentBit::COMP) != 0;\
    }

%%HAS_COMPONENT%%

#undef HAS_FUNC

#define GETTER_FUNC(COMP)\
inline C##COMP& getComp##COMP(const i32 eid) {\
    assert(eid >= 0 && eid < MAX_ENTITIES);\
    assert(entityCompBits[eid] & ComponentBit::COMP);\
    return comp_##COMP[eid];\
}

%%GETTER_COMPONENT%%

#undef GETTER_FUNC
    
};


