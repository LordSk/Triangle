#include "ecs.h"

const char* ComponentBit::Names[] = {
%%NAMES_COMPONENT%%
};

i32 EntityComponentSystem::createEntity(const char* name)
{
    for(i32 i = 0; i < MAX_ENTITIES; ++i) {
        if(entityAlive[i] == false) {
            entityAlive[i] = true;
            entityUID[i] = entityUIDNext++;
            memmove(entityName[i], name, sizeof(entityName[i]));
            return i;
        }
    }
    assert(0);
    return -1;
}

void EntityComponentSystem::deleteEntity(const i32 eid)
{
    assert(eid >= 0 && eid < MAX_ENTITIES);
    entityDeleteFlag[eid] = true;
}

void EntityComponentSystem::update(f64 delta, f64 physLerpAlpha)
{
#define UPDATE_FUNC(component) update##component(this, comp_##component.data(), comp_##component.count(),\
    comp_##component._dataEltId.data(), delta, physLerpAlpha)

%%UPDATE_COMPONENT%%

#undef UPDATE_FUNC
}

void EntityComponentSystem::removeFlaggedForDeletion()
{
#define DELETE_FUNC(component) onDelete##component(this, comp_##component.data(), comp_##component.count(),\
    comp_##component._dataEltId.data(), entityDeleteFlag)

%%ON_DELETE_COMPONENT%%

#undef DELETE_FUNC

    for(i32 i = 0; i < MAX_ENTITIES; ++i) {
        if(entityDeleteFlag[i]) {
            u64& compBits = entityCompBits[i];

%%REMOVE_COMPONENT%%
            
            compBits = 0;
            entityDeleteFlag[i] = false;
            entityAlive[i] = false;
        }
    }
}
